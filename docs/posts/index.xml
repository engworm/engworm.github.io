<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on engwSite</title>
    <link>https://engworm.github.io/posts/</link>
    <description>Recent content in Posts on engwSite</description>
    <image>
      <url>https://engworm.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://engworm.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 27 Jul 2022 14:52:13 +0900</lastBuildDate><atom:link href="https://engworm.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>アメリカに行きたい</title>
      <link>https://engworm.github.io/posts/us/</link>
      <pubDate>Wed, 27 Jul 2022 14:52:13 +0900</pubDate>
      
      <guid>https://engworm.github.io/posts/us/</guid>
      <description>ボスに「ひまだよね？」と言われて別の仕事を任されてしまい、ただいま絶賛残業をしています。 思いつきで仕事させられるのはいい気分じゃないですね。
アメリカに行きたい さて、話は急に変わって、アメリカに行きたいなって思っています． 必要な資金の半分近くまでお金を貯めることができたので、いよいよ現実味を帯びてきました。 辛くてしんどい学部生のテスト採点頑張ってよかったです。
僕は、学生時代に挑戦したことが今後自分の実現できることになるのだと思っています。 修論発表後の2月下旬から3月中旬の間、1週間くらいバックパッカーしようと思いますので海外滞在経験のある方相談に乗ってください！ ニューヨーク、シリコンバレー、オーランドのうちのどこかに行くつもりです。
こういうふうに思うようになったきっかけは学部2年生の夏の出会いでした。 その方は当時京大病院で勤務されていた女性医師で、入院したときにお世話になりました。 学生時代単身でインドに渡り、なんと1ヶ月間バックパッカーされたそうです。 曰く、「学生時代の時間あるときに、ものは試しと思ってやってごらんよ」とのことです。 場所としてアメリカを選んだのは、エンジニアとして将来アメリカに挑戦してみたいと思っているからです。
ということでさっさとこの仕事を終わらせて、早く修論のテーマを決めたいと思います。 メンタルが逝くと忙しいと言って現実逃避しだすのは僕の悪い癖です。 それでは！</description>
    </item>
    
    <item>
      <title>はじめての多倍長計算</title>
      <link>https://engworm.github.io/posts/tabaityo/tabaityo/</link>
      <pubDate>Thu, 30 Jun 2022 21:19:09 +0900</pubDate>
      
      <guid>https://engworm.github.io/posts/tabaityo/tabaityo/</guid>
      <description>多倍長計算とは 私の所属する数値計算の研究室では，ことあるごとに「計算環境はパラメータの一つに過ぎない」と言われて育ちます．
計算環境として代表的なのは間違いなく倍精度環境でしょう． これは，一般的に不動小数点を扱う環境であり，10進法で約15桁の有効桁数を持ちます． 多くの場面で使われていますね．
一方，多倍長環境は倍精度環境以上の有効桁数をもち，（計算時間と引き換えに）50桁や100桁精度の計算が可能になります． 今日は先程の格言を思い出しながら，C++/boostを用いて多倍長計算の世界を覗いてみましょう．
double型から多倍長へのキャスト double型から多倍長への暗黙のキャストは許されていますが，非常に注意しなければなりません． 下のコードをみてみましょう． 円周率を50桁表示させています．1
#include &amp;lt;iostream&amp;gt; #include &amp;lt;iomanip&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt; using namespace boost::multiprecision; constexpr int d = std::numeric_limits&amp;lt;double&amp;gt;::digits10; constexpr int dd = std::numeric_limits&amp;lt;cpp_dec_float_100&amp;gt;::digits10; int main() { cpp_dec_float_100 pi = M_PI; std::cout &amp;lt;&amp;lt; showpoint; std::cout &amp;lt;&amp;lt; std::setprecision(50) &amp;lt;&amp;lt; pi &amp;lt;&amp;lt; std::endl; return 0; } 3.1415926535897931159979634685441851615905761718750 ん？ 気づきましたでしょうか． 暗黒通信団 円周率1,000,000桁表 と比較すると，この円周率の17桁目以降はデタラメな値になっているのです！！2
正しくは下のようなコードになります．
#include &amp;lt;iostream&amp;gt; #include &amp;lt;iomanip&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt; using namespace boost::multiprecision; constexpr int d = std::numeric_limits&amp;lt;double&amp;gt;::digits10; constexpr int dd = std::numeric_limits&amp;lt;cpp_dec_float_100&amp;gt;::digits10; cpp_dec_float_100 PI = boost::math::constants::pi&amp;lt;cpp_dec_float_100&amp;gt;(); int main() { cpp_dec_float_100 pi = PI; std::cout &amp;lt;&amp;lt; std::showpoint; std::cout &amp;lt;&amp;lt; std::setprecision(50) &amp;lt;&amp;lt; pi &amp;lt;&amp;lt; std::endl; return 0; } 3.</description>
    </item>
    
    <item>
      <title>参照でできること（初級編）</title>
      <link>https://engworm.github.io/posts/pointer/pointer/</link>
      <pubDate>Wed, 18 May 2022 00:38:31 +0900</pubDate>
      
      <guid>https://engworm.github.io/posts/pointer/pointer/</guid>
      <description>参照とは C++では参照型がはじめの難関だと思います． 私はCからC++に入ったのでポインタには慣れていましたが，参照型は長年パッとしませんでした． 配列を題材に参照について試行錯誤してみようと思います．
さて，わかりやすく説明するなら参照とはエイリアス（別名）1のことです． 下のコードをみてください．
double *data; data = new double[10]; double * &amp;amp;x = data; dataはdoubleを指すポインタ型で，doubleを10個格納できる配列の先頭を指しています． つまり，xはdoubleを指すポインタの別名（参照）というわけです．
*(x+1) = 4.6; cout &amp;lt;&amp;lt; *(data+1) &amp;lt;&amp;lt; endl; // 4.6 x[1] = 2.; cout &amp;lt;&amp;lt; data[1] &amp;lt;&amp;lt; endl; // 2 xはポインタであることを意識するために，C likeに書いた上段とC++ likeに書いた下段を比べてみましょう． 上段のコードではxのポインタに1（8Byte分）を足したものを逆参照し，値を代入しています． 下段はそれを簡略化して書いただけです． いずれにせよ，ポインタxを逆参照することで元のdataが書き換えられていることがわかります．
参照使い方の例 参照型によってどんなことができるのでしょう． 具体的な例でみていきましょう．
doubleをN個格納する配列dataに，以下のような操作を行う関数show, plusoneを与えます．
showはdataの要素を改行しながら表示する plusoneはdataの要素全てに1を足して上書きする #include &amp;lt;iostream&amp;gt; void show(double * arr) { for (int i = 0; i &amp;lt; N; ++i) { std::cout &amp;lt;&amp;lt; arr[i] &amp;lt;&amp;lt; std::endl; } return; } void plusone(double * &amp;amp;arr) { for (int i = 0; i &amp;lt; N; ++i) { arr[i] += 1.</description>
    </item>
    
    <item>
      <title>Gaussの発散定理に関する備忘録</title>
      <link>https://engworm.github.io/posts/gauss/gauss/</link>
      <pubDate>Mon, 02 May 2022 14:02:43 +0900</pubDate>
      
      <guid>https://engworm.github.io/posts/gauss/gauss/</guid>
      <description>はじめに ベクトル解析で学習するGaussの発散定理は，様々な書き方の流儀があります． 初学者にとっては混乱しがちな箇所であり，最近見直す機会があったのでわかりやすくまとめておきたいと思います．
嘘は書いていないつもりですが，ごまかしている箇所はあります． 講義ノートや本と比較して検証してみてください．
（復習）Gaussの発散定理 まずは主張を書いておきましょう．
\(\Omega\subset \mathbb{R}^2\)は有界領域， \(\partial\Omega\)は十分滑らかとする． このとき，\(\overline{\Omega}\)上で滑らかなベクトル値函数\(\overrightarrow{F}(x,y)=\left(f_1(x,y), f_2(x,y)\right)\)に対し， $$ \int_{\Omega}\mathrm{div}\overrightarrow{F}(x,y)dxdy = \int_{\partial\Omega}\overrightarrow{F}(x,y)\cdot \overrightarrow{\nu}ds $$ が成立する． 但し，\(\overrightarrow{\nu}\)は\(\partial\Omega\)上の外向き単位法線ベクトルであり， \(ds\)は\(\partial\Omega\)上の線素とする．
線素\(ds\)について説明しておきましょう． \(s\)は弧長パラメータと言って，ある地点を\(s=0\)として測った曲線の長さを表します． 線素\(ds\)とは\(s\)の微小変化量ということです．
それから，式を読む際の注意点です． \(\overrightarrow{F}(x,y)\)のことを\(F(x)\)としたり， \(dxdy\)のことを\(dx\)と書くことがあります． 内積\(\cdot\)が省略されることもあります． 書き方の流儀が問題になると申し上げたのはここで， ベクトル解析の分野では省略されている箇所を補って読む必要が多いのです． 複雑な箇所は慣れるまで省略せずに書くのが良さそうですね．1
Stieljtes積分の形にする 境界\(\partial\Omega\)上の点\((x,y)\)は弧長パラメータ\(s\)を用いて\((x(s),y(s))\)と表すことができます． したがって，点\((x,y)\)における単位接線ベクトル\(\overrightarrow{\tau}\)は2 $$ \overrightarrow{\tau} = \left( \begin{array}{c} \frac{dx}{ds} \\ \frac{dy}{ds} \end{array} \right) $$ と表すことができます． \(\overrightarrow{\tau}\)を負方向に\(\pi/2\)回転させることで，外向き単位法線ベクトル\(\overrightarrow{\nu}\)を $$ \overrightarrow{\nu} = \left( \begin{array}{c} \frac{dy}{ds} \\ -\frac{dx}{ds} \end{array} \right) $$ と具体的に書くことができました．
Gauss発散定理の右辺に代入しましょう． すると， $$ \begin{align} \int_{\partial\Omega}\overrightarrow{F}(x,y)\cdot \overrightarrow{\nu}ds &amp;amp;= \int_{\partial\Omega} \left( \begin{array}{c} f_1 \\ f_2 \end{array} \right) \cdot \left( \begin{array}{c} \frac{dy}{ds} \\ -\frac{dx}{ds} \end{array} \right)ds \\ &amp;amp;= \int_{\partial\Omega}\left(f_1\frac{dy}{ds}-f_2\frac{dx}{ds}\right)ds \\ &amp;amp;= \int_{\partial\Omega}f_1dy - f_2dx \end{align} $$ となります． これで，線素を用いた線積分だった右辺がStieltjes積分になりましたね．</description>
    </item>
    
    <item>
      <title>自己紹介</title>
      <link>https://engworm.github.io/posts/whoami/whoami/</link>
      <pubDate>Fri, 29 Apr 2022 13:24:26 +0900</pubDate>
      
      <guid>https://engworm.github.io/posts/whoami/whoami/</guid>
      <description>はじめまして． engwと申します．
徳島県出身で，阿南市にある徳島県立富岡東高等学校に通っていました． 高校卒業後は1年間東京で浪人し，京都大学理学部へ進学しました． 現在は修士課程で解析学と数値計算のお勉強をしています．
数学やプログラミングについてだったり，京都でおすすめの楽しい場所だったり，いろいろ書いてみます． 何かでみなさんの参考になればいいなと思っています． 最低でも1ヶ月に1回くらいは更新したいです．
よろしくお願いいたします．</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>https://engworm.github.io/posts/test/test/</link>
      <pubDate>Fri, 29 Apr 2022 13:04:01 +0900</pubDate>
      
      <guid>https://engworm.github.io/posts/test/test/</guid>
      <description>Hello, world!</description>
    </item>
    
  </channel>
</rss>
